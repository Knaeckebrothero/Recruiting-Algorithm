# Use butane to generate the ignition file
# Windows command: butane --pretty --strict config.bu --output config.ign
variant: fcos
version: 1.5.0

# User configuration
passwd:
  users:
    - name: core
      ssh_authorized_keys:
        - ssh-ed25519 SSH_KEY_GOES_HERE

# System services configuration
systemd:
  units:
    # Setup daily reboot
    - name: daily-restart.timer
      enabled: true
      contents: |
        [Unit]
        Description=Daily Restart

        [Timer]
        OnCalendar=*-*-* 05:00:00
        Persistent=true

        [Install]
        WantedBy=multi-user.target
    - name: daily-restart.service
      enabled: true
      contents: |
        [Unit]
        Description=Trigger Daily Restart

        [Service]
        Type=oneshot
        ExecStart=/usr/bin/systemctl reboot

        [Install]
        # This line is commented out to prevent the service from starting at boot
        # WantedBy=multi-user.target
        WantedBy=timer.target

    # Install and start node exporter
    - name: node-exporter-install.service
      enabled: true
      contents: |
        [Unit]
        Description=Install Node Exporter
        After=network-online.target
        Wants=network-online.target
        Before=node-exporter.service

        [Service]
        Type=oneshot
        ExecStart=/bin/sh -c 'set -x; cd /tmp; /usr/bin/curl -sfL -LO https://github.com/prometheus/node_exporter/releases/download/v1.8.0/node_exporter-1.8.0.linux-amd64.tar.gz && tar xvfz node_exporter-1.8.0.linux-amd64.tar.gz && cp node_exporter-1.8.0.linux-amd64/node_exporter /usr/local/bin/node_exporter && rm -rf node_exporter-1.8.0.linux-amd64*'
        RemainAfterExit=true

        [Install]
        WantedBy=multi-user.target
    - name: node-exporter.service
      enabled: true
      contents: |
        [Unit]
        Description=Node Exporter
        After=network-online.target
        Wants=network-online.target

        [Service]
        ExecStart=/usr/local/bin/node_exporter
        Restart=on-failure
        RestartSec=5s

        [Install]
        WantedBy=multi-user.target

    # Install and start prometheus
    - name: prometheus-install.service
      enabled: true
      contents: |
        [Unit]
        Description=Install Prometheus
        After=network-online.target
        Wants=network-online.target
        Before=prometheus.service

        [Service]
        Type=oneshot
        ExecStart=/bin/sh -c 'set -x; cd /tmp; /usr/bin/curl -sfL -LO https://github.com/prometheus/prometheus/releases/download/v2.33.0/prometheus-2.33.0.linux-amd64.tar.gz && tar xvfz prometheus-2.33.0.linux-amd64.tar.gz && cp prometheus-2.33.0.linux-amd64/prometheus /usr/local/bin/prometheus && cp -r prometheus-2.33.0.linux-amd64/consoles /etc/prometheus/ && cp -r prometheus-2.33.0.linux-amd64/console_libraries /etc/prometheus/ && rm -rf prometheus-2.33.0.linux-amd64*'
        RemainAfterExit=true

        [Install]
        WantedBy=multi-user.target
    - name: prometheus.service
      enabled: true
      contents: |
        [Unit]
        Description=Prometheus Server
        After=network-online.target
        Wants=network-online.target
        Requires=prometheus-install.service

        [Service]
        Type=simple
        ExecStart=/usr/local/bin/prometheus --config.file=/etc/prometheus/prometheus.yml --storage.tsdb.path=/var/prometheus/data
        Restart=on-failure
        RestartSec=5s

        [Install]
        WantedBy=multi-user.target

    # Install and start Kubernetes
    - name: k3s-install.service
      enabled: true
      contents: |
        [Unit]
        Description=Install k3s
        After=network-online.target
        Requires=network-online.target
        Before=k3s.service

        [Service]
        Type=oneshot
        # Use shell to read from stdin
        # ExecStart=/usr/bin/curl -sfL https://get.k3s.io | sh -
        ExecStart=/bin/sh -c '/usr/bin/curl -sfL https://get.k3s.io | sh'
        RemainAfterExit=true

        [Install]
        WantedBy=multi-user.target
    - name: k3s.service
      enabled: true
      contents: |
        [Unit]
        Description=Lightweight Kubernetes
        After=network-online.target
        Wants=network-online.target
        Requires=k3s-install.service

        [Service]
        Type=simple
        ExecStart=/usr/local/bin/k3s server --data-dir /var/k3s/data
        Restart=on-failure
        RestartSec=5s

        [Install]
        WantedBy=multi-user.target
    - name: k3s-install-metrics-server.service
      enabled: true
      contents: |
        [Unit]
        Description=Install k3s
        After=network-online.target
        Requires=k3s.service

        [Service]
        Type=oneshot
        ExecStart=/bin/sh -c 'kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml | sh'
        RemainAfterExit=true

        [Install]
        WantedBy=multi-user.target
        
    # Setup daily backup
    - name: backup.service
      enabled: true
      contents: |
        [Unit]
        Description=Backup data
        Before=daily-restart.service

        [Service]
        Type=oneshot
        ExecStart=/bin/sh -c '/usr/bin/cp -a /var/prometheus/data /var/storage/backup/prometheus/data && /usr/bin/cp -a /var/k3s/data /var/storage/backup/k3s/data && /usr/bin/cp -a /var/volumes /var/storage/backup/volumes'

        [Install]
        WantedBy=multi-user.target

    # Setup zincati update service
    - name: zincati.service
      enabled: true
      contents: |
        [Unit]
        Description=Zincati Update Service
        After=network-online.target
        Wants=network-online.target

        [Service]
        ExecStart=/usr/libexec/zincati agent -v
        Restart=on-failure
        RestartSec=5s

        [Install]
        WantedBy=multi-user.target

# Storage configuration
storage:
  disks:
    # Root m2 reserved for OS and Kubernetes
    - device: /dev/disk/by-id/coreos-boot-disk
      wipe_table: false
      partitions:
      - number: 4
        label: root
        size_mib: 32768 # At least 8192
        resize: true
      - size_mib: 0
        label: var

    # Main SSD for primary storage
    - device: /dev/sdb
      wipe_table: true
      partitions:
      - size_mib: 0
        start_mib: 0
        label: volumes

    # HDD for backup and mass storage
    - device: /dev/sda
      wipe_table: true
      partitions:
      - size_mib: 0
        start_mib: 0
        label: storage

  # Configure file systems and mount them on the previously configured hard drives
  filesystems:
    - path: /var
      device: /dev/disk/by-partlabel/var
      format: ext4
      wipe_filesystem: true
      with_mount_unit: true
    - path: /var/volumes
      device: /dev/disk/by-partlabel/volumes
      format: ext4
      wipe_filesystem: true
      with_mount_unit: true
    - path: /var/storage
      device: /dev/disk/by-partlabel/storage
      format: ext4
      wipe_filesystem: true
      with_mount_unit: true
  
  # Create working directories
  directories:
    - path: /var/k3s/data # Kubernetes data
    - path: /var/prometheus/data # Prometheus data
    - path: /var/volumes # Kubernetes persistent volumes
    - path: /var/storage/backup/k3s/data # Backup of kubernetes data
    - path: /var/storage/backup/prometheus/data # Backup of kubernetes data
    - path: /var/storage/backup/volumes # Backup of persistent volumes
    - path: /var/storage/config # Configuration files managed by the user
  
  # Setup configuration files
  files:
    - path: /etc/prometheus/prometheus.yml
      overwrite: true
      contents:
        inline: |
          global:
            scrape_interval: 15s

          scrape_configs:
          - job_name: node
            static_configs:
            - targets: ['localhost:9100']
          - job_name: 'kube-state-metrics'
            static_configs:
            - targets: ['localhost:30001']
      mode: 0755
    - path: /etc/zincati/config.d/90-custom.toml
      overwrite: true
      contents:
        inline: |
          [updates]
          strategy = "periodic"
          periodic.interval_minutes = 1440 # Checks for updates every 24h

          [updates.allow_downgrade]
          enabled = false  # Avoid downgrades

          [reboot]
          strategy = "off" # Disable reboot, since server reboots on daily basis anyway
      mode: 0755