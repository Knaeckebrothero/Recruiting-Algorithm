# Find the longest language string in the languages array for each document
db.KGL_LIN_PRF.aggregate([
    // Unwind the languages array into separate documents
    { $unwind: "$languages" },
    
    // Add a new field to each document that stores the length of the language string
    { $addFields: { languageLength: { $strLenCP: "$languages" } } },
    
    // Sort the documents by the length of the language string in descending order
    { $sort: { languageLength: -1 } },
    
    // Limit the output to the top 1 document with the longest language string
    { $limit: 1 },
    
    // Project the desired fields
    { $project: { languages: 1, languageLength: 1 } }
]).toArray();

# Find the longest recommendation string in the recommendations array for each document
db.KGL_LIN_PRF.aggregate([
    { $unwind: "$recommendations" },

    { $addFields: { textLength: { $strLenCP: "$recommendations" } } },

    { $sort: { textLength: -1 } },

    { $limit: 1 },

    { $project: { recommendations: 1, textLength: 1 } }
]).toArray();

# Find the longest skill string in the recommendations array for each document
db.KGL_LIN_PRF.aggregate([
    { $unwind: "$skills" },

    { $addFields: { textLength: { $strLenCP: "$skills" } } },

    { $sort: { textLength: -1 } },

    { $limit: 1 },

    { $project: { skills: 1, textLength: 1 } }
]).toArray();

# Find the longest interest string in the recommendations array for each document
db.KGL_LIN_PRF.aggregate([
    { $unwind: "$interests" },

    { $addFields: { textLength: { $strLenCP: "$interests" } } },

    { $sort: { textLength: -1 } },

    { $limit: 1 },

    { $project: { interests: 1, textLength: 1 } }
]).toArray();

# Find the longest specialities string in the recommendations array for each document
db.KGL_LIN_CMP.aggregate([
    { $unwind: "$specialities" },

    { $addFields: { textLength: { $strLenCP: "$specialities" } } },

    { $sort: { textLength: -1 } },

    { $limit: 1 },

    { $project: { specialities: 1, textLength: 1 } }
]).toArray();

# Find the longest education string in the recommendations array for each document
db.KGL_LIN_PRF.aggregate([
    // Unwind the array to transform each element of the array into a separate document
    { $unwind: "$education" },

    // Group by the degree_name to get unique values
    { $group: { _id: "$education.degree_name" } },

    // Count the number of unique degree names
    { $group: { _id: null, count: { $sum: 1 } } }
])

# Find companies with more than 2 company sizes
{"company_size.2": { $exists: true }}

# Find companies with more than 2 locations
{"locations.2": { $exists: true }}

# Find persons who aren't devs or nodevs
db.KGL_TJS.find({
    $nor: [
        { MainBranch: "Dev" },
        { MainBranch: "NotDev" }
    ]
})
db.KGL_TJS.aggregate([
    {
        $match: {
            $nor: [
                { MainBranch: "Dev" },
                { MainBranch: "NotDev" }
            ]
        }
    },
    {
    $count: "count"
    }
])

# Find number of unique ages
db.KGL_TJS.aggregate([
    // Group by the Age attribute to create unique groups
    { $group: { _id: "$Age" } },

    // Count the number of unique Age values
    { $count: "uniqueAgesCount" }
])

# Get all genders
db.KGL_TJS.aggregate([
    // Group by the Gender attribute to find unique values
    { $group: { _id: "$Gender" } }
])
